#include "danya_matrix.h"


// danya_create_matrix


#test Incorrect_input_parameters_1
matrix_t result;
int error_code = danya_create_matrix(-1, 2, &result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_2
matrix_t result;
int error_code = danya_create_matrix(1, -2, &result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_3
int error_code = danya_create_matrix(1, 2, NULL);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_4
matrix_t result;
int error_code = danya_create_matrix(3, 0, &result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_5
matrix_t result;
int error_code = danya_create_matrix(0, 3, &result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_6
matrix_t result;
int error_code = danya_create_matrix(0, 0, &result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_7
int error_code = danya_create_matrix(0, 0, NULL);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_8
matrix_t result;
int error_code = danya_create_matrix(2147483647, 2147483647, &result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_9
matrix_t result;
int error_code = danya_create_matrix(1147483647, 0, &result);
ck_assert_int_eq(error_code, 1);

#test Correct_input_parameters_10
matrix_t result;
int error_code = danya_create_matrix(1, 1, &result);
ck_assert_int_eq(error_code, 0);

#test Correct_input_parameters_11
matrix_t result;
int error_code = danya_create_matrix(2, 6, &result);
ck_assert_int_eq(error_code, 0);

#test Correct_input_parameters_12
matrix_t result;
int error_code = danya_create_matrix(6, 2, &result);
ck_assert_int_eq(error_code, 0);

#test Correct_input_parameters_13
matrix_t result;
int error_code = danya_create_matrix(100, 100, &result);
ck_assert_int_eq(error_code, 0);

#test Correct_input_parameters_14
matrix_t result;
int error_code = danya_create_matrix(1000, 1000, &result);
ck_assert_int_eq(error_code, 0);

#test Correct_input_parameters_15
matrix_t result;
result.rows = 10;
result.columns = 10;
int error_code = danya_create_matrix(1000, 1000, &result);
ck_assert_int_eq(error_code, 0);


//danya_remove_matrix


#test Correct_input_parameters_remove_matrix_1
matrix_t result;
danya_create_matrix(3, 3, &result);
danya_remove_matrix(&result);


#test Incorrect_input_parameters_remove_matrix_1
matrix_t result;
result.matrix = NULL;
danya_remove_matrix(&result);


#test Incorrect_input_parameters_remove_matrix_2
matrix_t result;
danya_create_matrix(3, 3, &result);
danya_remove_matrix(NULL);


// danya_eq_matrix


#test Correct_input_parameters_danya_eq_matrix_1
matrix_t my_matrix;
matrix_t my_matrix2;
danya_create_matrix(10, 10, &my_matrix);
danya_create_matrix(10, 10, &my_matrix2);
int error_code = danya_eq_matrix(&my_matrix, &my_matrix2);
ck_assert_int_eq(error_code, 1);

#test Correct_input_parameters_danya_eq_matrix_2
matrix_t my_matrix;
matrix_t my_matrix2;
danya_create_matrix(1000, 1000, &my_matrix);
danya_create_matrix(1000, 1000, &my_matrix2);
int error_code = danya_eq_matrix(&my_matrix, &my_matrix2);
ck_assert_int_eq(error_code, 1);

#test Correct_input_parameters_danya_eq_matrix_3
matrix_t my_matrix;
matrix_t my_matrix2;
danya_create_matrix(1000, 1000, &my_matrix);
danya_create_matrix(1000, 1000, &my_matrix2);
int error_code = danya_eq_matrix(&my_matrix, &my_matrix2);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_eq_matrix_1
matrix_t my_matrix;
matrix_t my_matrix2;
danya_create_matrix(1001, 1000, &my_matrix);
danya_create_matrix(1000, 1000, &my_matrix2);
int error_code = danya_eq_matrix(&my_matrix, &my_matrix2);
ck_assert_int_eq(error_code, 0);

#test Incorrect_input_parameters_danya_eq_matrix_2
matrix_t my_matrix;
matrix_t my_matrix2;
danya_create_matrix(1000, 1001, &my_matrix);
danya_create_matrix(1000, 1000, &my_matrix2);
int error_code = danya_eq_matrix(&my_matrix, &my_matrix2);
ck_assert_int_eq(error_code, 0);

#test Incorrect_input_parameters_danya_eq_matrix_3
matrix_t my_matrix;
matrix_t my_matrix2;
danya_create_matrix(1001, 1001, &my_matrix);
danya_create_matrix(1000, 1000, &my_matrix2);
int error_code = danya_eq_matrix(&my_matrix, &my_matrix2);
ck_assert_int_eq(error_code, 0);

#test Incorrect_input_parameters_danya_eq_matrix_4
matrix_t my_matrix;
matrix_t my_matrix2;
danya_create_matrix(1001, 1000, &my_matrix);
danya_create_matrix(1000, 1001, &my_matrix2);
int error_code = danya_eq_matrix(&my_matrix, &my_matrix2);
ck_assert_int_eq(error_code, 0);

#test Incorrect_input_parameters_danya_eq_matrix_5
matrix_t my_matrix;
danya_create_matrix(1001, 1000, &my_matrix);
int error_code = danya_eq_matrix(&my_matrix, NULL);
ck_assert_int_eq(error_code, 0);

#test Incorrect_input_parameters_danya_eq_matrix_6
matrix_t my_matrix2;
danya_create_matrix(1000, 1001, &my_matrix2);
int error_code = danya_eq_matrix(NULL, &my_matrix2);
ck_assert_int_eq(error_code, 0);

#test Incorrect_input_parameters_danya_eq_matrix_7
matrix_t my_matrix;
matrix_t my_matrix2;
danya_create_matrix(1000, 1000, &my_matrix);
danya_create_matrix(1000, 1000, &my_matrix2);
my_matrix.matrix[0][0] = 2;
my_matrix2.matrix[0][0] = 1;
int error_code = danya_eq_matrix(&my_matrix, &my_matrix2);
ck_assert_int_eq(error_code, 0);

#test Incorrect_input_parameters_danya_eq_matrix_8
matrix_t my_matrix;
matrix_t my_matrix2;
danya_create_matrix(1000, 1000, &my_matrix);
danya_create_matrix(1000, 1000, &my_matrix2);
my_matrix.matrix[131][131] = 211;
my_matrix2.matrix[131][132] = 210.9;
int error_code = danya_eq_matrix(&my_matrix, &my_matrix2);
ck_assert_int_eq(error_code, 0);


// danya_sum_matrix


#test Incorrect_input_parameters_danya_sum_matrix_1
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(20, 10, &my_matrix2);
int error_code = danya_sum_matrix(NULL, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_sum_matrix_2
matrix_t my_matrix;
matrix_t my_result;
danya_create_matrix(10, 20, &my_matrix);
int error_code = danya_sum_matrix(&my_matrix, NULL, &my_result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_sum_matrix_3
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(2147483647, 10, &my_matrix);
danya_create_matrix(10, 10, &my_matrix2);
int error_code = danya_sum_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_sum_matrix_4
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(10, 10, &my_matrix);
danya_create_matrix(2147483647, 10, &my_matrix2);
int error_code = danya_sum_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_sum_matrix_5
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(10, 20, &my_matrix);
danya_create_matrix(20, 10, &my_matrix2);
int error_code = danya_sum_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 2);

#test Incorrect_input_parameters_danya_sum_matrix_6
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(20, 10, &my_matrix);
danya_create_matrix(10, 20, &my_matrix2);
int error_code = danya_sum_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 2);

#test Incorrect_input_parameters_danya_sum_matrix_7
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(20, 20, &my_matrix);
danya_create_matrix(10, 20, &my_matrix2);
int error_code = danya_sum_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 2);

#test Incorrect_input_parameters_danya_sum_matrix_8
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(20, 10, &my_matrix);
danya_create_matrix(20, 20, &my_matrix2);
int error_code = danya_sum_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 2);

#test Correct_input_parameters_danya_sum_matrix_9
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(100, 100, &my_matrix);
danya_create_matrix(100, 100, &my_matrix2);
int error_code = danya_sum_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 0);

#test Correct_input_parameters_danya_sum_matrix_10
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(1000, 1000, &my_matrix);
danya_create_matrix(1000, 1000, &my_matrix2);
int error_code = danya_sum_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 0);

#test Correct_input_parameters_danya_sum_matrix_11
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(1000, 1000, &my_matrix);
danya_create_matrix(1000, 1000, &my_matrix2);
my_matrix.matrix[31][31] = 149;
int error_code = danya_sum_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 0);

#test Correct_input_parameters_danya_sum_matrix_12
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(1000, 1000, &my_matrix);
danya_create_matrix(1000, 1000, &my_matrix2);
for (int i = 0; i < my_matrix.rows; i++) {
    for (int j = 0; j < my_matrix.columns; j++) {
        my_matrix.matrix[i][j] = i * 100.0 + j + 1.0;
    }
}
for (int i = 0; i < my_matrix2.rows; i++) {
    for (int j = 0; j < my_matrix2.columns; j++) {
        my_matrix2.matrix[i][j] = i * 10.0 + j + 1.0;
    }
}
int error_code = danya_sum_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 0);

#test Correct_input_parameters_danya_sum_matrix_13
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(1000, 1000, &my_matrix);
danya_create_matrix(1000, 1000, &my_matrix2);
for (int i = 0; i < my_matrix.rows; i++) {
    for (int j = 0; j < my_matrix.columns; j++) {
        my_matrix.matrix[i][j] = i * 10.0 + j + 1.0;
    }
}
for (int i = 0; i < my_matrix2.rows; i++) {
    for (int j = 0; j < my_matrix2.columns; j++) {
        my_matrix2.matrix[i][j] = i * 10.0 + j + 1.0;
    }
}
int error_code = danya_sum_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 0);

#test Correct_input_parameters_danya_sum_matrix_14
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(1000, 1000, &my_matrix);
danya_create_matrix(1000, 1000, &my_matrix2);
for (int i = 0; i < my_matrix.rows; i++) {
    for (int j = 0; j < my_matrix.columns; j++) {
        my_matrix.matrix[i][j] = i * 10.0 + j + 1.0;
    }
}
for (int i = 0; i < my_matrix2.rows; i++) {
    for (int j = 0; j < my_matrix2.columns; j++) {
        my_matrix2.matrix[i][j] = i * 91.0 + j + 1.0;
    }
}
int error_code = danya_sum_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 0);

#test Correct_input_parameters_danya_sum_matrix_15
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(1000, 1000, &my_matrix);
danya_create_matrix(1000, 1000, &my_matrix2);
for (int i = 0; i < my_matrix.rows; i++) {
    for (int j = 0; j < my_matrix.columns; j++) {
        my_matrix.matrix[i][j] = i * 10.0 + j + 1.0;
    }
}
int error_code = danya_sum_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 0);

#test Correct_input_parameters_danya_sum_matrix_16
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(1000, 1000, &my_matrix);
danya_create_matrix(1000, 1000, &my_matrix2);
for (int i = 0; i < my_matrix2.rows; i++) {
    for (int j = 0; j < my_matrix2.columns; j++) {
        my_matrix2.matrix[i][j] = i * 10.0 + j + 1.0;
    }
}
int error_code = danya_sum_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 0);


// danya_sub_matrix


#test Incorrect_input_parameters_danya_sub_matrix_1
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(20, 10, &my_matrix2);
int error_code = danya_sub_matrix(NULL, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_sub_matrix_2
matrix_t my_matrix;
matrix_t my_result;
danya_create_matrix(10, 20, &my_matrix);
int error_code = danya_sub_matrix(&my_matrix, NULL, &my_result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_sub_matrix_3
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(2147483647, 10, &my_matrix);
danya_create_matrix(10, 10, &my_matrix2);
int error_code = danya_sub_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_sub_matrix_4
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(10, 10, &my_matrix);
danya_create_matrix(2147483647, 10, &my_matrix2);
int error_code = danya_sub_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_sub_matrix_5
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(10, 20, &my_matrix);
danya_create_matrix(20, 10, &my_matrix2);
int error_code = danya_sub_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 2);

#test Incorrect_input_parameters_danya_sub_matrix_6
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(20, 10, &my_matrix);
danya_create_matrix(10, 20, &my_matrix2);
int error_code = danya_sub_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 2);

#test Incorrect_input_parameters_danya_sub_matrix_7
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(20, 20, &my_matrix);
danya_create_matrix(10, 20, &my_matrix2);
int error_code = danya_sub_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 2);

#test Incorrect_input_parameters_danya_sub_matrix_8
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(20, 10, &my_matrix);
danya_create_matrix(20, 20, &my_matrix2);
int error_code = danya_sub_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 2);

#test Correct_input_parameters_danya_sub_matrix_9
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(100, 100, &my_matrix);
danya_create_matrix(100, 100, &my_matrix2);
int error_code = danya_sub_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 0);

#test Correct_input_parameters_danya_sub_matrix_10
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(1000, 1000, &my_matrix);
danya_create_matrix(1000, 1000, &my_matrix2);
int error_code = danya_sub_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 0);

#test Correct_input_parameters_danya_sub_matrix_11
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(1000, 1000, &my_matrix);
danya_create_matrix(1000, 1000, &my_matrix2);
my_matrix.matrix[31][31] = 149;
int error_code = danya_sub_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 0);

#test Correct_input_parameters_danya_sub_matrix_12
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(1000, 1000, &my_matrix);
danya_create_matrix(1000, 1000, &my_matrix2);
for (int i = 0; i < my_matrix.rows; i++) {
    for (int j = 0; j < my_matrix.columns; j++) {
        my_matrix.matrix[i][j] = i * 100.0 + j + 1.0;
    }
}
for (int i = 0; i < my_matrix2.rows; i++) {
    for (int j = 0; j < my_matrix2.columns; j++) {
        my_matrix2.matrix[i][j] = i * 10.0 + j + 1.0;
    }
}
int error_code = danya_sub_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 0);

#test Correct_input_parameters_danya_sub_matrix_13
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(1000, 1000, &my_matrix);
danya_create_matrix(1000, 1000, &my_matrix2);
for (int i = 0; i < my_matrix.rows; i++) {
    for (int j = 0; j < my_matrix.columns; j++) {
        my_matrix.matrix[i][j] = i * 10.0 + j + 1.0;
    }
}
for (int i = 0; i < my_matrix2.rows; i++) {
    for (int j = 0; j < my_matrix2.columns; j++) {
        my_matrix2.matrix[i][j] = i * 10.0 + j + 1.0;
    }
}
int error_code = danya_sub_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 0);

#test Correct_input_parameters_danya_sub_matrix_14
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(1000, 1000, &my_matrix);
danya_create_matrix(1000, 1000, &my_matrix2);
for (int i = 0; i < my_matrix.rows; i++) {
    for (int j = 0; j < my_matrix.columns; j++) {
        my_matrix.matrix[i][j] = i * 10.0 + j + 1.0;
    }
}
for (int i = 0; i < my_matrix2.rows; i++) {
    for (int j = 0; j < my_matrix2.columns; j++) {
        my_matrix2.matrix[i][j] = i * 91.0 + j + 1.0;
    }
}
int error_code = danya_sub_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 0);

#test Correct_input_parameters_danya_sub_matrix_15
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(1000, 1000, &my_matrix);
danya_create_matrix(1000, 1000, &my_matrix2);
for (int i = 0; i < my_matrix.rows; i++) {
    for (int j = 0; j < my_matrix.columns; j++) {
        my_matrix.matrix[i][j] = i * 10.0 + j + 1.0;
    }
}
int error_code = danya_sub_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 0);

#test Correct_input_parameters_danya_sub_matrix_16
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(1000, 1000, &my_matrix);
danya_create_matrix(1000, 1000, &my_matrix2);
for (int i = 0; i < my_matrix2.rows; i++) {
    for (int j = 0; j < my_matrix2.columns; j++) {
        my_matrix2.matrix[i][j] = i * 10.0 + j + 1.0;
    }
}
int error_code = danya_sub_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 0);


// danya_mult_number


#test Correct_input_parameters_danya_mult_number_1
matrix_t my_matrix;
matrix_t my_result;
danya_create_matrix(100, 100, &my_matrix);
int error_code = danya_mult_number(&my_matrix, 3.0, &my_result);
ck_assert_int_eq(error_code, 0);

#test Correct_input_parameters_danya_mult_number_2
matrix_t my_matrix;
matrix_t my_result;
danya_create_matrix(100, 100, &my_matrix);
int error_code = danya_mult_number(&my_matrix, -3.0, &my_result);
ck_assert_int_eq(error_code, 0);

#test Correct_input_parameters_danya_mult_number_3
matrix_t my_matrix;
matrix_t my_result;
danya_create_matrix(100, 100, &my_matrix);
int error_code = danya_mult_number(&my_matrix, 300.1234, &my_result);
ck_assert_int_eq(error_code, 0);

#test Correct_input_parameters_danya_mult_number_4
matrix_t my_matrix;
matrix_t my_result;
danya_create_matrix(100, 100, &my_matrix);
int error_code = danya_mult_number(&my_matrix, -300.1234, &my_result);
ck_assert_int_eq(error_code, 0);

#test Correct_input_parameters_danya_mult_number_5
matrix_t my_matrix;
matrix_t my_result;
danya_create_matrix(100, 100, &my_matrix);
int error_code = danya_mult_number(&my_matrix, 0.0, &my_result);
ck_assert_int_eq(error_code, 0);

#test Correct_input_parameters_danya_mult_number_6
matrix_t my_matrix;
matrix_t my_result;
danya_create_matrix(100, 100, &my_matrix);
int error_code = danya_mult_number(&my_matrix, 1.0, &my_result);
ck_assert_int_eq(error_code, 0);

#test Correct_input_parameters_danya_mult_number_7
matrix_t my_matrix;
matrix_t my_result;
danya_create_matrix(100, 100, &my_matrix);
int error_code = danya_mult_number(&my_matrix, 1e308, &my_result);
ck_assert_int_eq(error_code, 0);

#test Incorrect_input_parameters_danya_mult_number_8
matrix_t my_result;
int error_code = danya_mult_number(NULL, 3.0, &my_result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_mult_number_9
matrix_t my_matrix;
danya_create_matrix(100, 100, &my_matrix);
int error_code = danya_mult_number(&my_matrix, 3.0, NULL);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_mult_number_10
matrix_t my_matrix = {0};
my_matrix.rows = 2;
my_matrix.columns = 2;
my_matrix.matrix = NULL;
matrix_t my_result;
int error_code = danya_mult_number(&my_matrix, 30.0, &my_result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_mult_number_11
matrix_t my_matrix = {0};
my_matrix.rows = -2;
my_matrix.columns = 2;
my_matrix.matrix = NULL;
matrix_t my_result;
int error_code = danya_mult_number(&my_matrix, 30.0, &my_result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_mult_number_12
matrix_t my_matrix = {0};
my_matrix.rows = 2;
my_matrix.columns = -2;
my_matrix.matrix = NULL;
matrix_t my_result;
int error_code = danya_mult_number(&my_matrix, 30.0, &my_result);
ck_assert_int_eq(error_code, 1);


// danya_mult_matrix


#test Correct_input_parameters_danya_mult_matrix_1
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(100, 100, &my_matrix);
danya_create_matrix(100, 100, &my_matrix2);
for (int i = 0; i < my_matrix.rows; i++) {
    for (int j = 0; j < my_matrix.columns; j++) {
        my_matrix.matrix[i][j] = i * 10.0 + j + 1.0;
    }
}
for (int i = 0; i < my_matrix2.rows; i++) {
    for (int j = 0; j < my_matrix2.columns; j++) {
        my_matrix2.matrix[i][j] = i * 10.0 + j + 1.0;
    }
}
int error_code = danya_mult_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 0);

#test Correct_input_parameters_danya_mult_matrix_2
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(12, 99, &my_matrix);
danya_create_matrix(99, 12, &my_matrix2);
for (int i = 0; i < my_matrix.rows; i++) {
    for (int j = 0; j < my_matrix.columns; j++) {
        my_matrix.matrix[i][j] = i * 10.0 + j + 1.0;
    }
}
for (int i = 0; i < my_matrix2.rows; i++) {
    for (int j = 0; j < my_matrix2.columns; j++) {
        my_matrix2.matrix[i][j] = i * 10.0 + j + 1.0;
    }
}
int error_code = danya_mult_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 0);

#test Correct_input_parameters_danya_mult_matrix_3
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(1, 1, &my_matrix);
danya_create_matrix(1, 1, &my_matrix2);
for (int i = 0; i < my_matrix.rows; i++) {
    for (int j = 0; j < my_matrix.columns; j++) {
        my_matrix.matrix[i][j] = i * 10.0 + j + 1.0;
    }
}
for (int i = 0; i < my_matrix2.rows; i++) {
    for (int j = 0; j < my_matrix2.columns; j++) {
        my_matrix2.matrix[i][j] = i * 10.0 + j + 1.0;
    }
}
int error_code = danya_mult_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 0);

#test Correct_input_parameters_danya_mult_matrix_4
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(10, 123, &my_matrix);
danya_create_matrix(123, 55, &my_matrix2);
for (int i = 0; i < my_matrix.rows; i++) {
    for (int j = 0; j < my_matrix.columns; j++) {
        my_matrix.matrix[i][j] = i * 10.0 + j + 1.0;
    }
}
for (int i = 0; i < my_matrix2.rows; i++) {
    for (int j = 0; j < my_matrix2.columns; j++) {
        my_matrix2.matrix[i][j] = i * 10.0 + j + 1.0;
    }
}
int error_code = danya_mult_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 0);

#test Incorrect_input_parameters_danya_mult_matrix_1
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(123, 55, &my_matrix2);
int error_code = danya_mult_matrix(NULL, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_mult_matrix_2
matrix_t my_matrix;
matrix_t my_result;
danya_create_matrix(10, 123, &my_matrix);
int error_code = danya_mult_matrix(&my_matrix, NULL, &my_result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_mult_matrix_3
matrix_t my_matrix;
matrix_t my_matrix2;
danya_create_matrix(10, 123, &my_matrix);
danya_create_matrix(123, 55, &my_matrix2);
int error_code = danya_mult_matrix(&my_matrix, &my_matrix2, NULL);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_mult_matrix_4
matrix_t my_matrix;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(10, 122, &my_matrix);
danya_create_matrix(123, 55, &my_matrix2);
int error_code = danya_mult_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 2);

#test Incorrect_input_parameters_danya_mult_matrix_5
matrix_t my_matrix = {0};
my_matrix.rows = 2;
my_matrix.columns = 3;
my_matrix.matrix = NULL;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(123, 55, &my_matrix2);
int error_code = danya_mult_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_mult_matrix_6
matrix_t my_matrix;
matrix_t my_matrix2 = {0};
my_matrix2.rows = 2;
my_matrix2.columns = 3;
my_matrix2.matrix = NULL;
matrix_t my_result;
danya_create_matrix(123, 55, &my_matrix);
int error_code = danya_mult_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_mult_matrix_7
matrix_t my_matrix;
my_matrix.rows = -2;
my_matrix.columns = 2;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(123, 55, &my_matrix2);
int error_code = danya_mult_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_mult_matrix_8
matrix_t my_matrix;
my_matrix.rows = 2;
my_matrix.columns = -2;
matrix_t my_matrix2;
matrix_t my_result;
danya_create_matrix(123, 55, &my_matrix2);
int error_code = danya_mult_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_mult_matrix_9
matrix_t my_matrix;
matrix_t my_matrix2;
my_matrix2.rows = -2;
my_matrix2.columns = 2;
matrix_t my_result;
danya_create_matrix(123, 55, &my_matrix);
int error_code = danya_mult_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_mult_matrix_10
matrix_t my_matrix;
matrix_t my_matrix2;
my_matrix2.rows = 2;
my_matrix2.columns = -2;
matrix_t my_result;
danya_create_matrix(123, 55, &my_matrix);
int error_code = danya_mult_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_mult_matrix_11
matrix_t my_matrix;
my_matrix.rows = -2;
my_matrix.columns = -2;
my_matrix.matrix = NULL;
matrix_t my_matrix2;
my_matrix2.rows = -2;
my_matrix2.columns = -2;
my_matrix2.matrix = NULL;
matrix_t my_result;
int error_code = danya_mult_matrix(&my_matrix, &my_matrix2, &my_result);
ck_assert_int_eq(error_code, 1);


// danya_transpose


#test Correct_input_parameters_danya_transpose_1
matrix_t my_matrix;
matrix_t my_result;
danya_create_matrix(10, 10, &my_matrix);
for (int i = 0; i < my_matrix.rows; i++) {
    for (int j = 0; j < my_matrix.columns; j++) {
        my_matrix.matrix[i][j] = i * 10.0 + j + 1.0;
    }
}
int error_code = danya_transpose(&my_matrix, &my_result);
ck_assert_int_eq(error_code, 0);

#test Incorrect_input_parameters_danya_transpose_2
matrix_t my_result;
int error_code = danya_transpose(NULL, &my_result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_transpose_3
matrix_t my_matrix;
danya_create_matrix(10, 10, &my_matrix);
for (int i = 0; i < my_matrix.rows; i++) {
    for (int j = 0; j < my_matrix.columns; j++) {
        my_matrix.matrix[i][j] = i * 10.0 + j + 1.0;
    }
}
int error_code = danya_transpose(&my_matrix, NULL);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_transpose_4
matrix_t my_matrix;
my_matrix.rows = -2;
my_matrix.columns = 2;
matrix_t my_result;
int error_code = danya_transpose(&my_matrix, &my_result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_transpose_5
matrix_t my_matrix;
my_matrix.rows = 2;
my_matrix.columns = -2;
matrix_t my_result;
int error_code = danya_transpose(&my_matrix, &my_result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_transpose_6
matrix_t my_matrix;
my_matrix.rows = 2;
my_matrix.columns = 2;
my_matrix.matrix = NULL;
matrix_t my_result;
int error_code = danya_transpose(&my_matrix, &my_result);
ck_assert_int_eq(error_code, 1);


// danya_determinant


#test Correct_input_parameters_danya_determinant_1
matrix_t my_matrix;
double result;
danya_create_matrix(2, 2, &my_matrix);
my_matrix.matrix[0][0] = 5;
my_matrix.matrix[0][1] = 2;
my_matrix.matrix[1][0] = 3;
my_matrix.matrix[1][1] = 6;
int error_code = danya_determinant(&my_matrix, &result);
ck_assert_int_eq(error_code, 0);
ck_assert_double_eq(result, 24.000000);

#test Correct_input_parameters_danya_determinant_2
matrix_t my_matrix;
double result;
danya_create_matrix(3, 3, &my_matrix);
my_matrix.matrix[0][0] = 12;
my_matrix.matrix[0][1] = 4;
my_matrix.matrix[0][2] = 13;
my_matrix.matrix[1][0] = 45;
my_matrix.matrix[1][1] = 2;
my_matrix.matrix[1][2] = 4;
my_matrix.matrix[2][0] = 12;
my_matrix.matrix[2][1] = 3;
my_matrix.matrix[2][2] = 4;
int error_code = danya_determinant(&my_matrix, &result);
ck_assert_int_eq(error_code, 0);
ck_assert_double_eq(result, 867.000000);

#test Correct_input_parameters_danya_determinant_3
matrix_t my_matrix;
double result;
danya_create_matrix(4, 4, &my_matrix);
my_matrix.matrix[0][0] = 12;
my_matrix.matrix[0][1] = 4;
my_matrix.matrix[0][2] = 13;
my_matrix.matrix[0][3] = 5;
my_matrix.matrix[1][0] = 45;
my_matrix.matrix[1][1] = 2;
my_matrix.matrix[1][2] = 4;
my_matrix.matrix[1][3] = 7;
my_matrix.matrix[2][0] = 12;
my_matrix.matrix[2][1] = 3;
my_matrix.matrix[2][2] = 4;
my_matrix.matrix[2][3] = 11;
my_matrix.matrix[3][0] = 34;
my_matrix.matrix[3][1] = 12;
my_matrix.matrix[3][2] = 22;
my_matrix.matrix[3][3] = 1;

int error_code = danya_determinant(&my_matrix, &result);
ck_assert_int_eq(error_code, 0);
ck_assert_double_eq(result, -30385.000000);

#test Correct_input_parameters_danya_determinant_4
matrix_t my_matrix;
double result;
danya_create_matrix(4, 4, &my_matrix);
my_matrix.matrix[0][0] = 0.0;
my_matrix.matrix[0][1] = 0.0;
my_matrix.matrix[0][2] = 0.0;
my_matrix.matrix[0][3] = 0.0;
my_matrix.matrix[1][0] = 45;
my_matrix.matrix[1][1] = 2;
my_matrix.matrix[1][2] = 4;
my_matrix.matrix[1][3] = 7;
my_matrix.matrix[2][0] = 12;
my_matrix.matrix[2][1] = 3;
my_matrix.matrix[2][2] = 4;
my_matrix.matrix[2][3] = 11;
my_matrix.matrix[3][0] = 34;
my_matrix.matrix[3][1] = 12;
my_matrix.matrix[3][2] = 22;
my_matrix.matrix[3][3] = 1;

int error_code = danya_determinant(&my_matrix, &result);
ck_assert_int_eq(error_code, 0);
ck_assert_double_eq(result, 0);

#test Correct_input_parameters_danya_determinant_5
matrix_t my_matrix;
double result;
danya_create_matrix(1, 1, &my_matrix);
int error_code = danya_determinant(&my_matrix, &result);
ck_assert_int_eq(error_code, 0);

#test Incorrect_input_parameters_danya_determinant_1
double result;
int error_code = danya_determinant(NULL, &result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_determinant_2
matrix_t my_matrix;
danya_create_matrix(2, 2, &my_matrix);
my_matrix.matrix[0][0] = 5;
my_matrix.matrix[0][1] = 2;
my_matrix.matrix[1][0] = 3;
my_matrix.matrix[1][1] = 6;
int error_code = danya_determinant(&my_matrix, NULL);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_determinant_3
matrix_t my_matrix;
double result;
my_matrix.rows = -2;
my_matrix.columns = 2;
int error_code = danya_determinant(&my_matrix, &result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_determinant_4
matrix_t my_matrix;
double result;
my_matrix.rows = 2;
my_matrix.columns = -2;
int error_code = danya_determinant(&my_matrix, &result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_determinant_5
matrix_t my_matrix;
double result;
my_matrix.rows = 2;
my_matrix.columns = 2;
my_matrix.matrix = NULL;
int error_code = danya_determinant(&my_matrix, &result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_determinant_6
matrix_t my_matrix;
double result;
my_matrix.rows = -2;
my_matrix.columns = -3;
my_matrix.matrix = NULL;
int error_code = danya_determinant(&my_matrix, &result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_determinant_7
matrix_t my_matrix;
double result;
danya_create_matrix(10, 11, &my_matrix);
int error_code = danya_determinant(&my_matrix, &result);
ck_assert_int_eq(error_code, 2);


// danya_calc_complements


#test Correct_input_parameters_danya_calc_complements_1
matrix_t my_matrix;
matrix_t my_result;
matrix_t my_matrix_test;
danya_create_matrix(3, 3, &my_matrix_test);
my_matrix_test.matrix[0][0] = 0;
my_matrix_test.matrix[0][1] = 10;
my_matrix_test.matrix[0][2] = -20;
my_matrix_test.matrix[1][0] = 4;
my_matrix_test.matrix[1][1] = -14;
my_matrix_test.matrix[1][2] = 8;
my_matrix_test.matrix[2][0] = -8;
my_matrix_test.matrix[2][1] = -2;
my_matrix_test.matrix[2][2] = 4;
danya_create_matrix(3, 3, &my_matrix);
my_matrix.matrix[0][0] = 1;
my_matrix.matrix[0][1] = 2;
my_matrix.matrix[0][2] = 3;
my_matrix.matrix[1][0] = 0;
my_matrix.matrix[1][1] = 4;
my_matrix.matrix[1][2] = 2;
my_matrix.matrix[2][0] = 5;
my_matrix.matrix[2][1] = 2;
my_matrix.matrix[2][2] = 1;
int error_code = danya_calc_complements(&my_matrix, &my_result);
ck_assert_int_eq(error_code, 0);
ck_assert_double_eq(my_result.matrix[0][0], my_matrix_test.matrix[0][0]);
ck_assert_double_eq(my_result.matrix[0][1], my_matrix_test.matrix[0][1]);
ck_assert_double_eq(my_result.matrix[0][2], my_matrix_test.matrix[0][2]);
ck_assert_double_eq(my_result.matrix[1][0], my_matrix_test.matrix[1][0]);
ck_assert_double_eq(my_result.matrix[1][1], my_matrix_test.matrix[1][1]);
ck_assert_double_eq(my_result.matrix[1][2], my_matrix_test.matrix[1][2]);
ck_assert_double_eq(my_result.matrix[2][0], my_matrix_test.matrix[2][0]);
ck_assert_double_eq(my_result.matrix[2][1], my_matrix_test.matrix[2][1]);
ck_assert_double_eq(my_result.matrix[2][2], my_matrix_test.matrix[2][2]);

#test Correct_input_parameters_danya_calc_complements_2
matrix_t my_matrix;
matrix_t my_result;
danya_create_matrix(1, 1, &my_matrix);
my_matrix.matrix[0][0] = 1;
int error_code = danya_calc_complements(&my_matrix, &my_result);
ck_assert_int_eq(error_code, 0);

#test Incorrect_input_parameters_danya_calc_complements_1
matrix_t my_result;
int error_code = danya_calc_complements(NULL, &my_result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_calc_complements_2
matrix_t my_matrix;
danya_create_matrix(3, 3, &my_matrix);
my_matrix.matrix[0][0] = 1;
my_matrix.matrix[0][1] = 2;
my_matrix.matrix[0][2] = 3;
my_matrix.matrix[1][0] = 0;
my_matrix.matrix[1][1] = 4;
my_matrix.matrix[1][2] = 2;
my_matrix.matrix[2][0] = 5;
my_matrix.matrix[2][1] = 2;
my_matrix.matrix[2][2] = 1;
int error_code = danya_calc_complements(&my_matrix, NULL);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_calc_complements_3
matrix_t my_matrix;
matrix_t my_result;
my_matrix.rows = -2;
my_matrix.columns = 2;
int error_code = danya_calc_complements(&my_matrix, &my_result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_calc_complements_4
matrix_t my_matrix;
matrix_t my_result;
my_matrix.rows = 2;
my_matrix.columns = -2;
int error_code = danya_calc_complements(&my_matrix, &my_result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_calc_complements_5
matrix_t my_matrix;
matrix_t my_result;
my_matrix.rows = 2;
my_matrix.columns = 2;
my_matrix.matrix = NULL;
int error_code = danya_calc_complements(&my_matrix, &my_result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_calc_complements_6
matrix_t my_matrix;
matrix_t my_result;
danya_create_matrix(5, 6, &my_matrix);
int error_code = danya_calc_complements(&my_matrix, &my_result);
ck_assert_int_eq(error_code, 2);


// danya_inverse_matrix


#test Correct_input_parameters_danya_inverse_matrix_1
matrix_t my_matrix;
matrix_t my_result;
matrix_t my_matrix_test;
danya_create_matrix(3, 3, &my_matrix_test);
my_matrix_test.matrix[0][0] = 0.0;
my_matrix_test.matrix[0][1] = 1.5;
my_matrix_test.matrix[0][2] = -0.5;
my_matrix_test.matrix[1][0] = 1.0;
my_matrix_test.matrix[1][1] = -4.0;
my_matrix_test.matrix[1][2] = 1.0;
my_matrix_test.matrix[2][0] = -0.5;
my_matrix_test.matrix[2][1] = 1.0;
my_matrix_test.matrix[2][2] = 0.0;
danya_create_matrix(3, 3, &my_matrix);
my_matrix.matrix[0][0] = 4;
my_matrix.matrix[0][1] = 2;
my_matrix.matrix[0][2] = 2;
my_matrix.matrix[1][0] = 2;
my_matrix.matrix[1][1] = 1;
my_matrix.matrix[1][2] = 2;
my_matrix.matrix[2][0] = 4;
my_matrix.matrix[2][1] = 3;
my_matrix.matrix[2][2] = 6;
int error_code = danya_inverse_matrix(&my_matrix, &my_result);
ck_assert_int_eq(error_code, 0);
ck_assert_double_eq(my_result.matrix[0][0], my_matrix_test.matrix[0][0]);
ck_assert_double_eq(my_result.matrix[0][1], my_matrix_test.matrix[0][1]);
ck_assert_double_eq(my_result.matrix[0][2], my_matrix_test.matrix[0][2]);
ck_assert_double_eq(my_result.matrix[1][0], my_matrix_test.matrix[1][0]);
ck_assert_double_eq(my_result.matrix[1][1], my_matrix_test.matrix[1][1]);
ck_assert_double_eq(my_result.matrix[1][2], my_matrix_test.matrix[1][2]);
ck_assert_double_eq(my_result.matrix[2][0], my_matrix_test.matrix[2][0]);
ck_assert_double_eq(my_result.matrix[2][1], my_matrix_test.matrix[2][1]);
ck_assert_double_eq(my_result.matrix[2][2], my_matrix_test.matrix[2][2]);

#test Incorrect_input_parameters_danya_inverse_matrix_1
matrix_t my_matrix;
matrix_t my_result;
danya_create_matrix(3, 3, &my_matrix);
my_matrix.matrix[0][0] = 0;
my_matrix.matrix[0][1] = 0;
my_matrix.matrix[0][2] = 0;
my_matrix.matrix[1][0] = 2;
my_matrix.matrix[1][1] = 1;
my_matrix.matrix[1][2] = 2;
my_matrix.matrix[2][0] = 4;
my_matrix.matrix[2][1] = 3;
my_matrix.matrix[2][2] = 6;
int error_code = danya_inverse_matrix(&my_matrix, &my_result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_inverse_matrix_2
matrix_t my_result;
int error_code = danya_inverse_matrix(NULL, &my_result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_inverse_matrix_3
matrix_t my_matrix;
danya_create_matrix(3, 3, &my_matrix);
my_matrix.matrix[0][0] = 4;
my_matrix.matrix[0][1] = 2;
my_matrix.matrix[0][2] = 2;
my_matrix.matrix[1][0] = 2;
my_matrix.matrix[1][1] = 1;
my_matrix.matrix[1][2] = 2;
my_matrix.matrix[2][0] = 4;
my_matrix.matrix[2][1] = 3;
my_matrix.matrix[2][2] = 6;
int error_code = danya_inverse_matrix(&my_matrix, NULL);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_inverse_matrix_4
matrix_t my_matrix;
matrix_t my_result;
danya_create_matrix(4, 3, &my_matrix);
int error_code = danya_inverse_matrix(&my_matrix, &my_result);
ck_assert_int_eq(error_code, 2);

#test Incorrect_input_parameters_danya_inverse_matrix_5
matrix_t my_matrix;
matrix_t my_result;
my_matrix.rows = -3;
my_matrix.columns = 3;
int error_code = danya_inverse_matrix(&my_matrix, &my_result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_inverse_matrix_6
matrix_t my_matrix;
matrix_t my_result;
my_matrix.rows = 3;
my_matrix.columns = -3;
int error_code = danya_inverse_matrix(&my_matrix, &my_result);
ck_assert_int_eq(error_code, 1);

#test Incorrect_input_parameters_danya_inverse_matrix_7
matrix_t my_matrix;
matrix_t my_result;
my_matrix.rows = 3;
my_matrix.columns = 3;
my_matrix.matrix = NULL;
int error_code = danya_inverse_matrix(&my_matrix, &my_result);
ck_assert_int_eq(error_code, 1);